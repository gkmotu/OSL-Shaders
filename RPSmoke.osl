// General Noise Shader, returning a float (1D)
// Smoke.osl By Mads Dr√∏schler, based on Zap Anderson Noise.osl
// Modified: 2022-02-23
// Copyright 2022 Autodesk Inc, All rights reserved. This file is licensed under Apache 2.0 license
//    https://github.com/ADN-DevTech/3dsMax-OSL-Shaders/blob/license/LICENSE.txt

shader RPSmoke
[[
	string help="A shader for generating Smoke noise",
	string category = "Rebel Pack\RPProcedural"
]]
(
	point  UVW    = transform("object", P)
		[[ string help = "The UVW coordinate to use. When not connected, defaults to Object space" ]],	
	float  Scale  = 25.0,
	int Smoke_Iterations = 4,
	int   StepFunction = 1 
		[[ string widget= "checkBox",
		   string label = "Step Function",
		   string help  = "Enables a per-layer smoothstep curve in the noise, allowing you to increase the 'contrast' of the noise" ]],
	float LowStep = 0.5
		[[ string help = "Low threshold of the smoothstep function.",
		   string label = "Low Step",
		   float  min = -1.0, float max = 1.0 ]],		
	float HiStep = 0.8
		[[ string help = "High threshold of the smoothstep function.",
		   string label = "High Step",		
		   float  min = -1.0, float max = 1.0 ]],		
	int   Normalize = 1 
		[[ string widget= "checkBox",
		   string help = "If the noise is auto-normalized to Amplitude or not." ]],
	float Amplitude = 1.0
		[[ string help = "The amplitude of the noise." ]],		
	float Phase     = 0.0
		[[ string help = "The 'Phase' is just a 4th coordinate of the noise, can be used to allow it to evolve over time, for example." ]],	
	float Normal_Strength = 1.0,
		   
	output float Out = 0,
	output normal Normal = 0,
)
{
	point pnt = UVW / Scale;
	
	float sum = 0;
	float curFreq = 1.0;
	float curAmp = Amplitude;
	
	float ns = 0.0;
    float a = 1.;
    pnt = 4.0 * pnt;
    
    for (int i = 0; i < Smoke_Iterations; i++) 
    {
        ns += a * abs(noise("perlin", pnt * curFreq, Phase + i));
        pnt = 2.0 * pnt;
        a /= 2.; 
	}	
	
	if (StepFunction)
	ns = smoothstep(LowStep, HiStep, ns);							
	Out += ns * curAmp;
	sum += curAmp;
	if (Normalize)
		Out /= sum / Amplitude;
		
	// Normals	
	vector U = normalize(Dx(P));
    vector V = normalize(Dy(P));
    vector A = normalize(calculatenormal((P*(1/Normal_Strength)) + N * ns));
    float  ux = dot(U, A);
    float  uy = dot(V, A);   
    float  l  = sqrt(ux*ux+uy*uy);
    float  uz = sqrt(1.0 - l*l);
   
    Normal = color(ux,uy,uz) / 2.0 + 0.5;	
		
}
